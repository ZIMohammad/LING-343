[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Project 2",
    "section": "",
    "text": "library(gutenbergr)\nlibrary(tidytext)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(patchwork)\n\nThis nifty patchwork library can help us combine graphs to make side-by-side visualization possible"
  },
  {
    "objectID": "index.html#libraries",
    "href": "index.html#libraries",
    "title": "Project 2",
    "section": "",
    "text": "library(gutenbergr)\nlibrary(tidytext)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(patchwork)\n\nThis nifty patchwork library can help us combine graphs to make side-by-side visualization possible"
  },
  {
    "objectID": "index.html#functions",
    "href": "index.html#functions",
    "title": "Project 2",
    "section": "Functions",
    "text": "Functions\nLets make some funcitons to expedite this process. When downloading dataframes, we will need to use the gutenberg_download() function, the unnest the tokens with unnest_tokens(word, text), then remove stop words and unused columns.\nThis function will take in one parameter for the ID number of the text and return a dataframe of just the selected words from that text.\n\n\nCode\nbook_load &lt;- function(id_num) {\n  gutenberg_download(id_num, mirror = \"http://mirror.csclub.uwaterloo.ca/gutenberg\") |&gt;\n  unnest_tokens(word, text) |&gt; anti_join(stop_words) |&gt; select(word)\n}\n\n\nLets also make a function that takes this dataframe and graphs it. We start by breaking it up into 100 chunks. We will then multiply by size_coefficient to ensure that the differences in text length do not affect the results.\nThe function will take in a dataframe and output a graph.\n\n\nCode\ngraph_book &lt;- function(df, title_str) {\n  size_coefficient &lt;- (1000/nrow(df))\n  df_sentiment &lt;- df |&gt;\n    inner_join(get_sentiments(\"bing\"), by = \"word\") |&gt;\n    mutate(proportion = row_number() / n()) |&gt;\n    mutate(chunk = ceiling(proportion * 100)) |&gt;\n    group_by(chunk) |&gt;\n    summarise(\n      sentiment_score = ((sum(sentiment == \"positive\") - sum(sentiment == \"negative\"))*size_coefficient),\n      proportion = first(proportion),\n      .groups = \"drop\"\n    )\n  ggplot(df_sentiment, aes(x = proportion, y = sentiment_score, fill = sentiment_score &gt; 0)) +\n    geom_bar(stat = \"identity\", na.rm = TRUE) +\n    coord_cartesian(ylim = c(-1.5, 1)) +\n    scale_y_continuous(breaks = seq(-1.5, 1, by = 0.2)) +\n    scale_x_continuous(\n      limits = c(0, 1),\n      labels = scales::percent_format(),\n      breaks = seq(0, 1, 0.1)\n    ) +\n    scale_fill_manual(\n      values = c(\"red\", \"blue\"),\n      labels = c(\"Negative\", \"Positive\"),\n      name = \"Sentiment\"\n    ) +\n    labs(\n      title = paste(title_str, \"Sentiment\"),\n      x = \"Progrssion\",\n      y = \"Sentiment\"\n    ) +\n    theme_minimal() +\n    theme(axis.text.x = element_text(angle = 45, hjust = 1))\n}\n\n\nThis function will get the same data that is in the graph as a dataframe.\nThe function takes in a dataframe parameter and returns a dataframe on sentiments and proportions\n\n\nCode\nsentiment_df &lt;- function(df){\n  size_coefficient &lt;- (1000/nrow(df))\n  df &lt;- df |&gt;\n    inner_join(get_sentiments(\"bing\"), by = \"word\") |&gt;\n    mutate(proportion = row_number() / n()) |&gt;\n    mutate(chunk = ceiling(proportion * 100)) |&gt;\n    group_by(chunk) |&gt;\n    summarise(\n      sentiment_score = ((sum(sentiment == \"positive\") - sum(sentiment == \"negative\")) *\n                           size_coefficient),\n      proportion = first(proportion),\n      .groups = \"drop\"\n    )\n  return(df)\n}\n\n\nAnd a function to combine multiple dataframes into a single plot. This graph will plot the points of the sentiment values of all of the included dataframes onto a single graph and draw a curve to fit the plot.\nThis function takes in 2 dataframes and a title and outputs a graph.\n\n\nCode\nplot_multiple &lt;- function(df1, df2, df3, df4, title_str){\n  combined_df &lt;- bind_rows(bind_rows(df1, df2), bind_rows(df3, df4))\n  ggplot() +\n    geom_point(data = df1, aes(x = proportion, y = sentiment_score, color = \"1\")) +\n    geom_point(data = df2, aes(x = proportion, y = sentiment_score, color = \"2\")) +\n    geom_point(data = df3, aes(x = proportion, y = sentiment_score, color = \"3\")) +\n    geom_point(data = df4, aes(x = proportion, y = sentiment_score, color = \"4\")) +\n    geom_smooth(data = combined_df,aes(x = proportion, y = sentiment_score), method = \"loess\", se = FALSE) +\n    coord_cartesian(ylim = c(-1, 1)) +\n    scale_y_continuous(breaks = seq(-1, 1, by = 0.2)) +\n    labs(x = \"X-axis Label\", y = \"Y-axis Label\", title = title_str) +\n    theme_minimal()\n}"
  },
  {
    "objectID": "index.html#data",
    "href": "index.html#data",
    "title": "Project 2",
    "section": "Data",
    "text": "Data\nLet’s get data from a variety of literary genres and see how they compare. Let’s compile texts from the following genres.\n\nPhilosophies\nComedies\nEpics\nTragedies\n\n\n# Philosophy\nsymbolic_logic &lt;- book_load(28696)\npractical_critique &lt;- book_load(5683)\ncategories &lt;- book_load(2412)\nrepublic &lt;- book_load(1497)\n# Fiction\n  # Comedies\ndon_quixote &lt;- book_load(996)\ntristram_shandy &lt;- book_load(1079)\ndivine_comedy &lt;- book_load(8800)\ninspector &lt;- book_load(3735)\n  # Epics\nilliad &lt;- book_load(3059)\nodyssey &lt;- book_load(1727)\ngilgamesh &lt;- book_load(11000)\nparadise_lost &lt;- book_load(26)\n  # Tragedies\nothello &lt;- book_load(2267)\nfrankenstein &lt;- book_load(84)\nanna_karenina &lt;- book_load(1399)\nmoby_dick &lt;- book_load(2701)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html#graphing",
    "href": "index.html#graphing",
    "title": "Project 2",
    "section": "Graphing",
    "text": "Graphing\n\nPhilosophy Graphs\n\nsymbolic_logic |&gt;\n  graph_book(\"Symbolic Logic\") +\n  practical_critique |&gt;\n  graph_book(\"A Critique of Practical Reason\")\n\n\n\n\n\n\n\n\n\n\nComedy Graphs\n\ndon_quixote |&gt;\n  graph_book(\"Don Quixote\") +\n  tristram_shandy |&gt;\n  graph_book(\"Tristram Shandy\")\n\nWarning in inner_join(df, get_sentiments(\"bing\"), by = \"word\"): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 22634 of `x` matches multiple rows in `y`.\nℹ Row 2269 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n\n\n\n\n\n\n\n\n\n\nEpic Graphs\n\nilliad |&gt;\n  graph_book(\"The Illiad\") +\n  odyssey |&gt;\n  graph_book(\"The Odyssey\")\n\n\n\n\n\n\n\n\n\n\nTragedy Graphs\n\nothello |&gt;\n  graph_book(\"Othello\") +\n  frankenstein |&gt;\n  graph_book(\"Frankenstein\")"
  },
  {
    "objectID": "index.html#overlaid-graphs",
    "href": "index.html#overlaid-graphs",
    "title": "Project 2",
    "section": "Overlaid Graphs",
    "text": "Overlaid Graphs\n\nCombined Philosophy Graph\n\nplot_multiple(sentiment_df(symbolic_logic), sentiment_df(practical_critique))\n\n\n\n\n\n\n\n\n\n\nCombined Comedy Graph\n\nplot_multiple(sentiment_df(don_quixote), sentiment_df(tristram_shandy))\n\nWarning in inner_join(df, get_sentiments(\"bing\"), by = \"word\"): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 22634 of `x` matches multiple rows in `y`.\nℹ Row 2269 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n\n\n\n\n\n\n\n\n\n\nCombined Epic Graph\n\nplot_multiple(sentiment_df(illiad), sentiment_df(odyssey))\n\n\n\n\n\n\n\n\n\n\nCombined Tragedy Graph\n\nplot_multiple(sentiment_df(othello), sentiment_df(frankenstein))"
  },
  {
    "objectID": "index.html#graphing-books",
    "href": "index.html#graphing-books",
    "title": "Project 2",
    "section": "Graphing Books",
    "text": "Graphing Books\n\nPhilosophy Graphs\n\n\nCode\nsymbolic_logic |&gt;\n  graph_book(\"Symbolic Logic\") +\n  practical_critique |&gt;\n  graph_book(\"A Critique of Practical Reason\")\n\n\n\n\n\n\n\n\n\nCode\ncategories |&gt;\n  graph_book(\"Categories\") +\n  republic |&gt;\n  graph_book(\"The Republic\")\n\n\nWarning in inner_join(df, get_sentiments(\"bing\"), by = \"word\"): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 19515 of `x` matches multiple rows in `y`.\nℹ Row 3828 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n\n\n\n\n\n\n\n\n\n\nComedy Graphs\n\n\nCode\ndon_quixote |&gt;\n  graph_book(\"Don Quixote\") +\n  tristram_shandy |&gt;\n  graph_book(\"Tristram Shandy\")\n\n\nWarning in inner_join(df, get_sentiments(\"bing\"), by = \"word\"): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 22634 of `x` matches multiple rows in `y`.\nℹ Row 2269 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n\n\n\n\n\n\n\n\nCode\ndivine_comedy |&gt;\n  graph_book(\"The Divine Comedy\") +\n  inspector |&gt;\n  graph_book(\"The Government Inspector\")\n\n\nWarning in inner_join(df, get_sentiments(\"bing\"), by = \"word\"): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 6774 of `x` matches multiple rows in `y`.\nℹ Row 2924 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n\n\n\n\n\n\n\n\n\n\nEpic Graphs\n\n\nCode\nilliad |&gt;\n  graph_book(\"The Illiad\") +\n  odyssey |&gt;\n  graph_book(\"The Odyssey\")\n\n\n\n\n\n\n\n\n\nCode\ngilgamesh |&gt;\n  graph_book(\"Gilgamesh\") +\n  paradise_lost |&gt;\n  graph_book(\"Paradise Lost\")\n\n\nWarning in inner_join(df, get_sentiments(\"bing\"), by = \"word\"): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 11199 of `x` matches multiple rows in `y`.\nℹ Row 4475 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n\n\n\n\n\n\n\n\n\n\nTragedy Graphs\n\n\nCode\nothello |&gt;\n  graph_book(\"Othello\") +\n  frankenstein |&gt;\n  graph_book(\"Frankenstein\")\n\n\n\n\n\n\n\n\n\nCode\nanna_karenina |&gt;\n  graph_book(\"Anna Karenina\") +\n  moby_dick |&gt;\n  graph_book(\"Moby Dick\")\n\n\nWarning in inner_join(df, get_sentiments(\"bing\"), by = \"word\"): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 33519 of `x` matches multiple rows in `y`.\nℹ Row 6331 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n\nWarning in inner_join(df, get_sentiments(\"bing\"), by = \"word\"): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 25922 of `x` matches multiple rows in `y`.\nℹ Row 1497 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n\n\n\n\n\n\n\n\nTragedy books appear to have the strongest sentiment of any of the given genres. As expected, most of this sentiment is negative."
  },
  {
    "objectID": "index.html#genre-graphs",
    "href": "index.html#genre-graphs",
    "title": "Project 2",
    "section": "Genre Graphs",
    "text": "Genre Graphs\n\nCombined Graphs\n\n\nWarning in inner_join(df, get_sentiments(\"bing\"), by = \"word\"): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 19515 of `x` matches multiple rows in `y`.\nℹ Row 3828 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nWarning in inner_join(df, get_sentiments(\"bing\"), by = \"word\"): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 22634 of `x` matches multiple rows in `y`.\nℹ Row 2269 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n\nWarning in inner_join(df, get_sentiments(\"bing\"), by = \"word\"): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 6774 of `x` matches multiple rows in `y`.\nℹ Row 2924 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nWarning in inner_join(df, get_sentiments(\"bing\"), by = \"word\"): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 11199 of `x` matches multiple rows in `y`.\nℹ Row 4475 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nWarning in inner_join(df, get_sentiments(\"bing\"), by = \"word\"): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 33519 of `x` matches multiple rows in `y`.\nℹ Row 6331 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n\nWarning in inner_join(df, get_sentiments(\"bing\"), by = \"word\"): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 25922 of `x` matches multiple rows in `y`.\nℹ Row 1497 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nFrom these combined graphs we can assess the strength of sentiment (by the graph’s range), and the precision of the sentiment (by the variation in the graphs, since the graphs will be flatter the less of a pattern there is)."
  },
  {
    "objectID": "index.html#conclusions",
    "href": "index.html#conclusions",
    "title": "Project 2",
    "section": "Conclusions",
    "text": "Conclusions\n\nPhilosophy Books\nIt looks like, while philosophers are very sentimental, there is no pattern of sentiment that is indicative of philosophy texts.\n\n\nComedies\nThe comedies have a low range and a very flat curve, so based on our data, we assume that comedies are less sentimental than Philosophy texts and Tragedies and that comedies do not follow any particular sentimental trend.\n\n\nEpics\nIt appear that the beginnings of Epics have more positive sentiment and that that sentiment gradually declines before rising again towards the end. But overall, Epics are less sentimental than Philosophy books and Tragedies.\n\n\nTragedies\nTragedies have the strongest trend lines, and very strong sentiments. It appears that philosophy texts start with positive sentiment and end with negative sentiment, with a small reverse in the trend towards the middle. This appears to be a strong trend."
  }
]